/**
 * [returns setting from the settings $map 
 * @param  {[type]} $key [pass the setting that you want to return its value]
 * @return {[type]}      [returns the setting value]
 */
@function setting($key) {
    @return     unquote(map-get($_settings, $key));
}
@function base-color($key) {

    @return     unquote(map-get($base-colors, $key));
}
/**
 * [em description]
 * @param  {[type]} $pixels   [pixels number]
 * @param  {[type]} $context: $browser-context [description]
 * @return {[type]}           [description]
 */
@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}



// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;
 
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } }
// Usage:
// .element {
//   @include rem('padding',10px 0 2px 5px);
// }
// 
// 
// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}